{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":71485,"databundleVersionId":8059942,"sourceType":"competition"},{"sourceId":6063,"sourceType":"modelInstanceVersion","modelInstanceId":4684}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nos.environ['KERAS_BACKEND'] = 'tensorflow'\n\nimport keras_nlp\nimport keras\nimport keras.backend as K\nimport tensorflow as tf\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\ncmap = mpl.colormaps['coolwarm']","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-24T21:12:33.130832Z","iopub.execute_input":"2024-04-24T21:12:33.131357Z","iopub.status.idle":"2024-04-24T21:12:53.141602Z","shell.execute_reply.started":"2024-04-24T21:12:33.131314Z","shell.execute_reply":"2024-04-24T21:12:53.140011Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-04-24 21:12:35.639759: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-04-24 21:12:35.639926: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-04-24 21:12:35.798697: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Configuration","metadata":{}},{"cell_type":"code","source":"class CFG:\n    seed = 42\n    preset = 'deberta_v3_extra_small_en'\n    sequence_length = 512\n    epochs = 2\n    batch_size = 32\n    scheduler = 'cosine'\n    cache = False","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:12:53.143831Z","iopub.execute_input":"2024-04-24T21:12:53.144693Z","iopub.status.idle":"2024-04-24T21:12:53.152620Z","shell.execute_reply.started":"2024-04-24T21:12:53.144647Z","shell.execute_reply":"2024-04-24T21:12:53.148951Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"keras.utils.set_random_seed(CFG.seed)\nkeras.mixed_precision.set_global_policy('mixed_float16')","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:12:53.161867Z","iopub.execute_input":"2024-04-24T21:12:53.162349Z","iopub.status.idle":"2024-04-24T21:12:53.212088Z","shell.execute_reply.started":"2024-04-24T21:12:53.162313Z","shell.execute_reply":"2024-04-24T21:12:53.210782Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"### Load Data","metadata":{}},{"cell_type":"code","source":"BASE_PATH = '/kaggle/input/learning-agency-lab-automated-essay-scoring-2'\n\ndf = pd.read_csv(f'{BASE_PATH}/train.csv')","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:12:53.213816Z","iopub.execute_input":"2024-04-24T21:12:53.214523Z","iopub.status.idle":"2024-04-24T21:12:54.487592Z","shell.execute_reply.started":"2024-04-24T21:12:53.214483Z","shell.execute_reply":"2024-04-24T21:12:54.486207Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ntrain_df, valid_df = train_test_split(df, test_size=0.2, stratify=df['score'])","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:12:54.489220Z","iopub.execute_input":"2024-04-24T21:12:54.489658Z","iopub.status.idle":"2024-04-24T21:12:55.650268Z","shell.execute_reply.started":"2024-04-24T21:12:54.489621Z","shell.execute_reply":"2024-04-24T21:12:55.648967Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"train_df.score.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:12:55.651857Z","iopub.execute_input":"2024-04-24T21:12:55.652547Z","iopub.status.idle":"2024-04-24T21:12:55.671863Z","shell.execute_reply.started":"2024-04-24T21:12:55.652509Z","shell.execute_reply":"2024-04-24T21:12:55.670333Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"score\n3    5024\n2    3778\n4    3141\n1    1001\n5     776\n6     125\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"### Preprocessing","metadata":{}},{"cell_type":"code","source":"preprocessor = keras_nlp.models.DebertaV3Preprocessor.from_preset(\n    preset=CFG.preset,\n    sequence_length=CFG.sequence_length\n)\n\nfor key, value in preprocessor(\"The quick fox jumped.\").items():\n    print(f'{key}: {value.shape}')","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:12:55.673356Z","iopub.execute_input":"2024-04-24T21:12:55.673800Z","iopub.status.idle":"2024-04-24T21:12:57.517645Z","shell.execute_reply.started":"2024-04-24T21:12:55.673765Z","shell.execute_reply":"2024-04-24T21:12:57.516273Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stderr","text":"Attaching 'tokenizer.json' from model 'keras/deberta_v3/keras/deberta_v3_extra_small_en/2' to your Kaggle notebook...\nAttaching 'tokenizer.json' from model 'keras/deberta_v3/keras/deberta_v3_extra_small_en/2' to your Kaggle notebook...\nAttaching 'assets/tokenizer/vocabulary.spm' from model 'keras/deberta_v3/keras/deberta_v3_extra_small_en/2' to your Kaggle notebook...\n","output_type":"stream"},{"name":"stdout","text":"token_ids: (512,)\npadding_mask: (512,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Model Definition","metadata":{}},{"cell_type":"code","source":"classifier = keras_nlp.models.DebertaV3Classifier.from_preset(\n    CFG.preset, preprocessor=None, num_classes=6\n)\n\ninp = classifier.input\nlogit = classifier(inp)\npred = keras.layers.Softmax()(logit)\n\nmodel = keras.Model(inp, pred)\nmodel.compile(optimizer=\"rmsprop\", loss=tf.keras.losses.SparseCategoricalCrossentropy())\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:12:57.519267Z","iopub.execute_input":"2024-04-24T21:12:57.520579Z","iopub.status.idle":"2024-04-24T21:13:05.577775Z","shell.execute_reply.started":"2024-04-24T21:12:57.520533Z","shell.execute_reply":"2024-04-24T21:13:05.576020Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"Attaching 'config.json' from model 'keras/deberta_v3/keras/deberta_v3_extra_small_en/2' to your Kaggle notebook...\nAttaching 'config.json' from model 'keras/deberta_v3/keras/deberta_v3_extra_small_en/2' to your Kaggle notebook...\nAttaching 'model.weights.h5' from model 'keras/deberta_v3/keras/deberta_v3_extra_small_en/2' to your Kaggle notebook...\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ padding_mask        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ token_ids           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;45mNone\u001b[0m)      │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ deberta_v3_classif… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)         │ \u001b[38;5;34m70,832,262\u001b[0m │ padding_mask[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n│ (\u001b[38;5;33mDebertaV3Classifi…\u001b[0m │                   │            │ token_ids[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ softmax (\u001b[38;5;33mSoftmax\u001b[0m)   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m)         │          \u001b[38;5;34m0\u001b[0m │ deberta_v3_class… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ padding_mask        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ token_ids           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>)      │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ deberta_v3_classif… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)         │ <span style=\"color: #00af00; text-decoration-color: #00af00\">70,832,262</span> │ padding_mask[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">DebertaV3Classifi…</span> │                   │            │ token_ids[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ softmax (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Softmax</span>)   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ deberta_v3_class… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m70,832,262\u001b[0m (270.20 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">70,832,262</span> (270.20 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m70,832,262\u001b[0m (270.20 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">70,832,262</span> (270.20 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"tmp = preprocessor([\"hello my friend!\"])\nmodel(tmp)","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:13:05.582355Z","iopub.execute_input":"2024-04-24T21:13:05.583023Z","iopub.status.idle":"2024-04-24T21:13:52.144823Z","shell.execute_reply.started":"2024-04-24T21:13:05.582968Z","shell.execute_reply":"2024-04-24T21:13:52.142999Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"<tf.Tensor: shape=(1, 6), dtype=float16, numpy=array([[0.1615, 0.1929, 0.1627, 0.1543, 0.192 , 0.1365]], dtype=float16)>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Data Stream","metadata":{}},{"cell_type":"code","source":"def build_ds(texts, scores):\n    inp = preprocessor(texts)\n    return tf.data.Dataset.from_tensor_slices((inp, scores))","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:13:52.146930Z","iopub.execute_input":"2024-04-24T21:13:52.148417Z","iopub.status.idle":"2024-04-24T21:13:52.155486Z","shell.execute_reply.started":"2024-04-24T21:13:52.148341Z","shell.execute_reply":"2024-04-24T21:13:52.153884Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"train_ds = build_ds(train_df.full_text.tolist(), train_df.score.tolist())\ntrain_ds = train_ds.batch(CFG.batch_size)","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:13:52.157338Z","iopub.execute_input":"2024-04-24T21:13:52.157849Z","iopub.status.idle":"2024-04-24T21:13:55.460501Z","shell.execute_reply.started":"2024-04-24T21:13:52.157809Z","shell.execute_reply":"2024-04-24T21:13:55.458865Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"for i in train_ds.take(1):\n    print(np.isnan(i[0]['token_ids'].numpy()).any())","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:15:54.982012Z","iopub.execute_input":"2024-04-24T21:15:54.983297Z","iopub.status.idle":"2024-04-24T21:15:55.013187Z","shell.execute_reply.started":"2024-04-24T21:15:54.983250Z","shell.execute_reply":"2024-04-24T21:15:55.010465Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"False\n","output_type":"stream"}]},{"cell_type":"code","source":"g = next(iter(train_ds.take(1)))[0]\nmodel.predict(g)","metadata":{"execution":{"iopub.status.busy":"2024-04-24T21:16:24.968680Z","iopub.execute_input":"2024-04-24T21:16:24.969345Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.fit(train_ds, epochs=1)","metadata":{"execution":{"iopub.status.busy":"2024-04-24T18:08:54.884814Z","iopub.execute_input":"2024-04-24T18:08:54.885170Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1713982288.196027      81 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m432/433\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 641ms/step - loss: nan","output_type":"stream"},{"name":"stderr","text":"W0000 00:00:1713982688.676141      81 graph_launch.cc:671] Fallback to op-by-op mode because memset node breaks graph update\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}